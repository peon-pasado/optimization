k = 2,3,...,18
A(x) := minimum area with elements less or equal to x (and greater or equal to 1/18).
A(1/2) = 0.35237082...
A(1/3) = 0.53071025...
A(1/4) = 0.63730584...
A(1/5) = 0.70219372...

using 1/k with [calc2.cpp]

k | 5 x 2^9 x 3^7
A(1/2) = 0.34555600

k | 5^2 x 2^9 x 3^5
A(1/2) = 0.34555636

k | 2^8 x 3^8
A(1/2) = 0.34977873

k | 2^13 x 3^5
A(1/2) = 0.34977864

k | 2^15 x 3^4
A(1/2) = 0.34977852


k=2^1,...,2^23 [calc.cpp]

1: 1.00000000
2: 0.68750000
3: 0.54687500
4: 0.48046875
5: 0.44824219
6: 0.43237305
7: 0.42449951
8: 0.42057800
9: 0.41862106
10: 0.41764355
11: 0.41715503
12: 0.41691083
13: 0.41678874
14: 0.41672770
15: 0.41669718
16: 0.41668193
17: 0.41667430
18: 0.41667048
19: 0.41666857
20: 0.41666762
21: 0.41666714
22: 0.41666691
23: 0.41666679


better algorithm: 0.344925




Algoritmo A(n):

Deseamos encontrar dado los cuadrados de lado 1/i (2 <= i <= n), la minima area residual de un bin completo usando el algoritmo NFHD, 
luego de retirar su mayor elemento.


Sea el problema secundario B(i, j), con i <= j, donde rellenamos una fila entera del cuadrado usando NFHD, comenzando por colocar un 
elemento i, y donde no se pueda colocar un elemento j, tal que el area sea minima. Lo que es igual:


min \sum_{i <= k <= j} x_k * (1 / k**2)
s.t. 
    1 - 1/i - 1/j < \sum_{i <= k <= j} x_k * (1 / k) <= 1 - 1/i

El cual se puede resolver trivialmente resolviendo el knapsack problem, con la restriccion adicional que los pesos o los valores
no son enteros.

A partir del problema B, podemos plantear el problema A, como un camino de costo minimo desde i a j, para i <= j, con loops, 
tal que el costo de cada arista esta dado por B(i, j) y el pesos es dado por 1/i, donde la suma de pesos debe ser menor o igual
a 1, y sea m el ultimo nodo, al sumarle 1/m debe ser estrictamente mayor a 1. Esto debido a que es un bin maximal. Notemos, que
salvo los loops, el grafo es un dag, y se puede resolver como un problema de la mochila, considerando el ultimo cuadrado usado.
Lo que se ejemplifica con la siguiente recurrencia.

A(i, c) = A(j, c - 1/i) + B(j, i)

donde queremos encontrar A(n, x), tal que 1 - 1/n < x <= 1, para algun n.

Resolucion de problema B.

La idea utilizada es discretizar el espacio, en 1/eps valores, consideramos encontrar la minima suma 1/k^2, con i <= k <= j, 
para los pesos ceil(1/(eps x k)), a su vez, mantenemos la suma 1/k asociada.

Como cada elemento, ocupa a lo mas 1 casilla mas, 









